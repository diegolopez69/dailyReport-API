swagger: "2.0"
info:
  description: "Este es un contrato del backend para la herramienta de Daily Reports"
  version: "1.0.0"
  title: "Daily Reports API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3000"
basePath: "/api"


tags:
- name: "Users"
  description: "CRUD for the users and control of the login"
- name: "Computer"
  description: "CRUD for the computers table"  
- name: "Classroom"
  description: "CRUD for the Classroom table"  
- name: "Tools"
  description: "CRUD complete for tools."
- name: "Chromebook"
  description: "CRUD complete for tools."
- name: "Inventory"
  description: "CRUD complete for the inventory."



schemes:
- "http"

paths:
  /api/auth/signup:
    post:
      tags:
      - "Users"
      summary: "Path to create a new user on the application."
      operationId: "postSignUp"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Format to create a new user."
        required: true
        schema:
          $ref: "#/definitions/SignUpRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SignUpResponse"
        "400":
          description: "Content con not be empty!"
        "500":
          description: "Some error ocurred whilw creating the Tool"
  /api/auth/signin:
    post:
      tags:
      - "Users"
      summary: "Path to singin a user on the application."
      operationId: "postSignIn"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Format to singin a user on the application."
        required: true
        schema:
          $ref: "#/definitions/SignInRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SignInResponse"
        "400":
          description: "Content con not be empty!"
        "500":
          description: "Some error ocurred whilw creating the Tool"
  /api/user:
    get:
      tags:
        - "Users"
      summary: "Path to get all the users of the application."
      description: "Format to get all users of the application."
      operationId: "getAllUsers"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ArrayGetAllUsers"
        "400":
          description: "Content con not be empty!"
        "500":
          description: "Some error ocurred whilw creating the user"
  /api/user{usersId}:
    put:
      tags:
      - "Users"
      summary: "Update users with Id."
      operationId: "putUserById"
      produces:
      - "application/json"
      parameters:
      - name: "usersId"
        in: "path"
        description: "It is used to search for a specific user."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      - in: "body"
        name: "body"
        description: "Scheme to update a user."
        required: true
        schema:
          $ref: "#/definitions/UpdateUsersRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UpdateUsersResponse"
        "400":
          description: "Cannot update User with id=${id}. Maybe User was not found or req.body is empty!"
        "500":
          description: "Error updating User with id= + id"   
    get:
      tags:
      - "Users"
      summary: "Search for a user by specific ID."
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "usersId"
        in: "path"
        description: "It is used to search for a specific user"
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetAllUsersResponse"
        "404":
          description: "Cannot find User with id=${id}."
        "500":
          description: "Error retrieving User with id= + id"
    delete:
      tags:
      - "Users"
      summary: "Delete a user by specific ID."
      operationId: "deleteUserById"
      produces:
      - "application/json"
      parameters:
      - name: "usersId"
        in: "path"
        description: "It is used to delete for a specific user"
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/DeleteUsersResponse"
        "400":
          description: "Cannot delete User with id=${id}. Maybe User was not found!"
        "500":
          description: "Could not delete User with id= + id"
          
  /api/computer:
    get:
      tags:
      - "Computer"
      summary: "Returns all computers in the application"
      operationId: "getComputer"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetArrayComputer"
        "400":
          description: "Cannot delete computer with id=${id}. Maybe computer was not found!"
        "500":
           description: "Some error occurred while retrieving Computers."
    post:
      tags:
      - "Computer"
      summary: "Path to create a new computer within the application."
      operationId: "postComputer"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Create new Computer."
        required: true
        schema:
          $ref: "#/definitions/PostComputerRequest"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PostComputerResponse"
        "400":
            description: "Content can not be empty!"
        "500":
            description: "Some error occurred while creating the Computer."
  /api/computer{computerId}:
    put:
      tags:
      - "Computer"
      summary: "Update a Computer by specific ID."
      operationId: "putComputerById"
      produces:
      - "application/json"
      parameters:
      - name: "computerId"
        in: "path"
        description: "It is used to search for a specific Computer."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      - in: "body"
        name: "body"
        description: "Scheme for updating an application Computer."
        required: true
        schema:
          $ref: "#/definitions/PostComputerRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PutComputerResponse"
        "400":
          description: "Cannot update Computer with id=${id}. Maybe Computer was not found or req.body is empty!"
        "500":
          description: "Error updating Computer with id= + id"
    get:
      tags:
      - "Computer"
      summary: "Search for a computer by specific ID."
      operationId: "getComputerrById"
      produces:
      - "application/json"
      parameters:
      - name: "computerId"
        in: "path"
        description: "It is used to search for a specific Computer."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetComputerRequest"
        "404":
          description: "Cannot find Computer with id=${id}."
        "500":
          description: "Error retrieving Computer with id= + id"
    delete:
      tags:
      - "Computer"
      summary: "Remove a Computer from the app."
      operationId: "deletecomputer"
      produces:
      - "application/json"
      parameters:
      - name: "computerId"
        in: "path"
        description: "Id of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/DeleteComputerResponse"
        "400":
          description: "Cannot delete Computer with id=${id}. Maybe Computer was not found!"
        "500":
           description: "Could not delete Computer with id= + id"          
          
  /api/room:
    post: 
      tags:
       - "Classroom"
      summary: "Create a new classroom with in the application"
      operationId: "postClassroom"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Format to create a new Classroom"
        required: true
        schema:
          $ref: "#/definitions/PostClassroomRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PostClassroomResponse"
        "400":
          description: "Content can not be empty!"
        "500":
          description: "Some error occurred while creating the Classroom."
    get:
      tags:
       - "Classroom"
      summary: "Returns all the classrooms of the application"
      operationId: "getClassroom"
      produces:
      - "application/json"
      parameters: []
      responses:
         "200":
           description: "succesful operation"
           schema:
             $ref: "#/definitions/ArrayGetClassroomResponse"
         
  /api/room{roomId}:
    put:
      tags:
      - "Classroom"
      summary: "Update classroom with Id ."
      operationId: "putAulaById"
      produces:
      - "application/json"
      parameters:
      - name: "roomId"
        in: "path"
        description: "Search for a specific classroom."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated classroom scheme."
        required: true
        schema:
          $ref: "#/definitions/PostClassroomRequest"
      responses:
        "200":
           description: "succesful operation"
           schema:
             $ref: "#/definitions/PutClassroomResponse"
        "400":
          description: "Cannot update Classroom with id=${id}. Maybe Classroom was not found or req.body is empty!"
        "500":
          description: "Error updating Classroom with id= + id"
    get:
      tags:
      - "Classroom"
      summary: "Find a Classroom by ID."
      operationId: "getroomById"
      produces:
      - "application/json"
      parameters:
      - name: "roomId"
        in: "path"
        description: "Search for a specific classroom."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
           description: "succesful operation"
           schema:
             $ref: "#/definitions/GetClassroomResponse"
        "404":
          description: "Cannot find Classroom with id=${id}."
        "500":
          description: "Error retrieving Classroom with id= + id"
    delete:
      tags:
      - "Classroom"
      summary: "Delete Classroom."
      operationId: "deleteAula"
      produces:
      - "application/json"
      parameters:
      - name: "roomId"
        in: "path"
        description: "Id be doing erased"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/DeleteClassroomResponse"
        "400":
          description: "Cannot delete Classroom with id=${id}. Maybe Classroom was not found!"
        "500":
          description: "Could not delete Classroom with id= + id"          
          
  /api/tool:
    post:
      tags:
      - "Tools"
      summary: "Path to create a new tool with in the application."
      operationId: "postTools"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Format to create a new tool."
        required: true
        schema:
          $ref: "#/definitions/PostToolsRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PostToolsResponse"
        "400":
          description: "Content con not be empty!"
        "500":
          description: "Some error ocurred whilw creating the Tool"
    get:
      tags:
      - "Tools"
      summary: "Return all tools."
      operationId: "gettool"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ArrayGetToolsResponse"
        "400": 
          description: "Content can not be empty!"
        "500":
          description: "Some error occurred while retrieving Tools."
  /api/tool{toolsId}:
    put:
      tags:
      - "Tools"
      summary: "Update tools with Id."
      operationId: "putToolsById"
      produces:
      - "application/json"
      parameters:
      - name: "toolsId"
        in: "path"
        description: "It is used to search for a specific tool."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      - in: "body"
        name: "body"
        description: "Scheme to update a tool."
        required: true
        schema:
          $ref: "#/definitions/PostToolsRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PutToolsResponse"
        "400":
          description: "Cannot update Tool with id=${id}. Maybe Tool was not found or req.body is empty!"
        "500":
          description: "Error updating Tool with id= + id"  
    get:
      tags:
      - "Tools"
      summary: "Search for a tool by specific ID."
      operationId: "gettoolsById"
      produces:
      - "application/json"
      parameters:
      - name: "toolsId"
        in: "path"
        description: "It is used to search for a specific tool"
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetToolsRequest"
        "404":
          description: "Cannot find Tool with id=${id}."
        "500":
          description: "Error retrieving Tool with id= + id"  
    delete:
      tags:
      - "Tools"
      summary: "Delete tools"
      operationId: "deleteTools"
      produces:
      - "application/json"
      parameters:
      - name: "toolsId"
        in: "path"
        description: "ID of the tools that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/DeleteToolResponse"
        "400":
          description: "Cannot delete Tool with id=${id}. Maybe Tool was not found!"
        "500":
          description: "Could not delete Tool with id= + id"
  
  /api/chromebook:
    
    post:
      tags:
      - "Chromebook"
      summary: "Path to create a new chromebook within the application."
      operationId: "postChromebook"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Create new Chromebook."
        required: true
        schema:
          $ref: "#/definitions/PostChromebookRequest"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PostChromebookResponse"
        "400":
            description: "Content can not be empty!"
        "500":
            description: "Some error occurred while creating the Chromebook."
            
    get:
      tags:
      - "Chromebook"
      summary: "Returns all chromebooks in the application"
      operationId: "getChromebook"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetArrayChromebook"
        "400":
          description: "Cannot delete chromebook with id=${id}. Maybe chromebook was not found!"
        "500":
           description: "Some error occurred while retrieving chromebooks."
  /api/chromebook{chromebookId}:
    put:
      tags:
      - "Chromebook"
      summary: "Update a Chromebook by specific ID."
      operationId: "putChromebookById"
      produces:
      - "application/json"
      parameters:
      - name: "chromebookId"
        in: "path"
        description: "It is used to search for a specific Chromebook."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PutChromebookResponse"
        "400":
          description: "Cannot update Chromebook with id=${id}. Maybe Chromebook was not found or req.body is empty!"
        "500":
          description: "Error updating Chromebook with id= + id"
    get:
      tags:
      - "Chromebook"
      summary: "Search for a chromebook by specific ID."
      operationId: "getChromebookrById"
      produces:
      - "application/json"
      parameters:
      - name: "chromebookId"
        in: "path"
        description: "It is used to search for a specific Chromebook."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetAllChromebooks"
        "404":
          description: "Cannot find Chromebook with id=${id}."
        "500":
          description: "Error retrieving Chromebook with id= + id"
    delete:
      tags:
      - "Chromebook"
      summary: "Remove a Chromebook from the app."
      operationId: "deletechromebook"
      produces:
      - "application/json"
      parameters:
      - name: "chromebookId"
        in: "path"
        description: "Id of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/DeleteChromebookResponse"
        "400":
          description: "Cannot delete Chromebook with id=${id}. Maybe Chromebook was not found!"
        "500":
           description: "Could not delete Chromebook with id= + id"
  
  /api/ordenadorAula:
      post: 
        tags:
         - "Inventory"
        summary: "Create a new relation between classroom, computer and tool"
        operationId: "postInventory"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "body"
          description: "Format for creating a new relationship"
          required: true
          schema:
            $ref: "#/definitions/PostInventoryRequest"
        responses:
          "201":
            description: "successful operation"
            schema:
              $ref: "#/definitions/PostInventoryResponse"
          "400":
            description: "Content can not be empty!"
          "500":
             description: "Some error occurred while creating the the relation."
      get:
        tags:
         - "Inventory"
        summary: "Returns all the relationship made in the application"
        operationId: "getInventory"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "body"
          description: "Scheme to get the whole relationship"
          required: true
          schema:
            $ref: "#/definitions/ArrayGetAllInventory"
        responses:
           "200":
              description: "successful operation"
              schema:
                $ref: "#/definitions/PostChromebookResponse"
           "500":
             description: "Some error occurred while retrieving the relations."
  /api/ordenadorAula{OrdenadorAulaId}:
  
    put:
      tags:
      - "Inventory"
      summary: "Update a relationship by id."
      operationId: "putOrdenadorAulaById"
      produces:
      - "application/json"
      parameters:
      - name: "OrdenadorAulaId"
        in: "path"
        description: "Look for a specific relationship."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated schema of relations."
        required: true
        schema:
          $ref: "#/definitions/PostInventoryRequest"   
      responses:
        "200":
              description: "successful operation"
              schema:
                $ref: "#/definitions/PutInventoryResponse"
        "400":
          description: "Cannot update the relation with id=${id}. Maybe the relation was not found or req.body is empty!"
        "500":
          description: "Error updating the relation with id= + id"  
    get:
      tags:
      - "Inventory"
      summary: "Find a relationship by ID."
      operationId: "getInventoryById"
      produces:
      - "application/json"
      parameters:
      - name: "OrdenadorAulaId"
        in: "path"
        description: "Used to find a relationship."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
              description: "successful operation"
              schema:
                $ref: "#/definitions/GetInventoryById"
        "404":
          description: "Cannot find the relation with id=${id}."
        "500":
          description: "Error retrieving the relation with id= + id"
    delete:
      tags:
      - "Inventory"
      summary: "Delete a relationship from the application."
      operationId: "deleteOrdenadorAula"
      produces:
      - "application/json"
      parameters:
      - name: "OrdenadorAulaId"
        in: "path"
        description: "Id of the relation to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/DeleteInventoryResponse"
        "400":
          description: "Cannot delete the relation with id=${id}. Maybe the relation was not found!"
        "500":
          description: "Could not delete the relation with id= + id"
    
    
    
    
  
  
  
  
  
       
       
          
definitions:
  
  SignUpRequest:
    type: "object"
    properties:
      username:
        type: "string"
      email:
          type: "string"
      password:
        type: "string"
      roles:
        type: "string"
        enum:
        - "user"
        - "moderator"
        - "admin"
  
  SignUpResponse:
    type: "object"
    properties:
      message:
        type: "string"
        example: User was registered successfully
        
  SignInRequest:
    type: "object"
    properties:
      username:
        type: "string"
      password:
          type: "string"
          
  SignInResponse: 
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      username:
          type: "string"
          example: esc
      email: 
        type: "string"
        example: esc@gmail.com
      roles:
        type: "array"
        items: 
          type: "string"
          example: ROLE_USER
          
  GetAllUsersResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      username:
          type: "string"
          example: esc
      email: 
        type: "string"
        example: esc@gmail.com
      password: 
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updateAt:
         type: "string"
         format: "date-time"
          
  UpdateUsersRequest:
    type: "object"
    properties:
      username:
        type: "string"
        example: esc
      email:
          type: "string"
          example: esc@gmail.com
      password:
        type: "string"
      roles:
        type: array
        items:
          type: string
          example: admin
          
  UpdateUsersResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        example: 200
      message:
          type: "string"
          example: User was updated successfully
          
  DeleteUsersResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        example: 200
      message:
          type: "string"
          example: User was deleted successfully
          
  ArrayGetAllUsers:        
    type: "array"
    items:
      $ref: "#/definitions/GetAllUsersResponse"
          
  DeleteComputerResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        example: 200
      message:
          type: "string"
          example: Computer was deleted successfully
          
  DeleteClassroomResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        example: 200
      message:
          type: "string"
          example: Classroom was deleted successfully
          
  DeleteToolResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        example: 200
      message:
          type: "string"
          example: Tool was deleted successfully
          
  DeleteChromebookResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        example: 200
      message:
          type: "string"
          example: Chromebook was deleted successfully
          
  DeleteInventoryResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        example: 200
      message:
          type: "string"
          example: Relation was deleted successfully

  GetComputerRequest:
    type: "object"
    properties:
      Ordenador_id:
        type: "integer"
        example: 1
      Nombre:
        type: "string"
        example: esc
      createdAt:
        type: "string"
        format: "date-time"
      updateAt:
         type: "string"
         format: "date-time"
         
  GetArrayComputer:
    type: "array"
    items:
      $ref: "#/definitions/GetComputerRequest"
      
  PostComputerRequest:
    type: "object"
    properties:
      Nombre:
        type: "string"
        example: esc
        
  PostComputerResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 201
      Nombre:
        type: "string"
        example: Computer was created successfully
        
  PutComputerResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 200
      Nombre:
        type: "string"
        example: Computer was updated successfully

  PostClassroomRequest:
    type: "object"
    properties:
      Planta:
        type: "integer"
      Numero:
        type: "integer"
        
  PostClassroomResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 201
      Nombre:
        type: "string"
        example: Classroom was created successfully
        
  GetClassroomResponse:
    type: "object"
    properties:
      Aula_id:
        type: "integer"
        example: 1
      Planta:
        type: "integer"
        example: -2
      Numero:
        type: "integer"
        example: 2
      createdAt:
        type: "string"
        format: "date-time"
      updateAt:
         type: "string"
         format: "date-time"
         
    
  ArrayGetClassroomResponse:
    type: "array"
    items:
      $ref: "#/definitions/GetClassroomResponse"
      
  PutClassroomResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 200
      Nombre:
        type: "string"
        example: Classroom was updated successfully
        
  PostToolsRequest:
    type: "object"
    properties:
      Tipo:
        type: "string"
        example: Hardware
      Nombre:
        type: "string"
        example: HDMI
      
  PostToolsResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 201
      Nombre:
        type: "string"
        example: Tool was created successfully
        
  GetToolsRequest:
    type: "object"
    properties:
      Herramienta_id:
        type: "integer"
        format: "int64"
        example: 2
      tipo:
        type: "string"
        enum:
        - "Hardware"
      Nombre:
        type: "string"
        example: Cable ethernet
      createdAt:
        type: "string"
        format: "date-time"
      updateAt:
         type: "string"
         format: "date-time"
        
  ArrayGetToolsResponse:
    type: "array"
    items:
      $ref: "#/definitions/GetToolsRequest"
        
  PutToolsResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 200
      Nombre:
        type: "string"
        example: Tool was updated successfully
        
  PostChromebookRequest:
    type: "object"
    properties:
      Estado:
        type: "integer"
        example: 1
      Description:
        type: "string"
        example: No se puede revisar el aula porque tienen clases
      No_chromebook:
        type: "integer"
        example: 1
      No_sn:
        type: "string"
        example: 6FDS7FDS8
      No_armario:
        type: "integer"
        example: 1
      No_chr_funcionales:
        type: "integer"
        example: 9
      No_chr_no_funcionales:
        type: "integer"
        example: 1
      No_chr_totales:
        type: "integer"
        example: 10
        
  PostChromebookResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 201
      Nombre:
        type: "string"
        example: Chromebook was created successfully
        
  GetAllChromebooks:
    type: "object"
    properties:
      Estado:
        type: "integer"
        example: 1
      Description:
        type: "string"
        example: No se puede revisar el aula porque tienen clases
      No_chromebook:
        type: "integer"
        example: 1
      No_sn:
        type: "string"
        example: 6FDS7FDS8
      No_armario:
        type: "integer"
        example: 1
      No_chr_funcionales:
        type: "integer"
        example: 9
      No_chr_no_funcionales:
        type: "integer"
        example: 1
      No_chr_totales:
        type: "integer"
        example: 10
      createdAt:
        type: "string"
        format: "date-time"
      updateAt:
         type: "string"
         format: "date-time"
        
        
  GetArrayChromebook:
    type: "array"
    items:
      $ref: "#/definitions/GetAllChromebooks"
        
  PutChromebookResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 200
      Nombre:
        type: "string"
        example: Chromebook was updated successfully
      
  PostInventoryRequest:
    type: "object"
    properties:
      id_ordenador:
        type: "integer"
        example: 1
      id_aula:
        type: "integer"
        example: 1
      id_herramienta:
        type: "integer"
        example: 1
        
  PostInventoryResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 201
      Nombre:
        type: "string"
        example: Relation was created successfully
        
  GetAllInventory:
    type: "object"
    properties:
      Aho_id:
        type: "integer"
        example: 1
      Aula_id:
        type: "integer"
        example: 3
      Ordenador_id:
        type: "integer"
        example: 5
      Herramienta_id:
        type: "integer"
        example: 2
      createdAt:
        type: "string"
        format: "date-time"
      updateAt:
         type: "string"
         format: "date-time"
      tb_tool: 
         items:
          $ref: "#/definitions/GetAllInventoryTool"
      ordenador:
        items:
          $ref: "#/definitions/GetAllInventoryComputer"
      tb_classroom:
        items:
          $ref: "#/definitions/GetAllInventoryClassroom"

  GetAllInventoryTool:
    type: "object"
    properties:
      Herramienta_id:
        type: "integer"
        example: 1
      Tipo:
        type: "string"
        example: Hardware
      Nombre:
        type: "string"
        example: Cable ethernet
        
  GetAllInventoryComputer:
    type: "object"
    properties:
      Ordenador_id:
        type: "integer"
        example: 1
      Nombre:
        type: "string"
        example: 78FSDHF8DS7F
         
  GetAllInventoryClassroom:
    type: "object"
    properties:
      Aula_id:
        type: "integer"
        example: 1
      Planta:
        type: "integer"
        example: 1
      Numero:
        type: "integer"
        example: 1
        
  ArrayGetAllInventory:
    type: "array"
    items:
      $ref: "#/definitions/GetAllInventory"
      
  PutInventoryResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 200
      Nombre:
        type: "string"
        example: Relation was updated successfully
        
  GetInventoryById:
    type: "object"
    properties:
      Aho_id:
        type: "integer"
        example: 1
      Aula_id:
        type: "integer"
        example: 3
      Ordenador_id:
        type: "integer"
        example: 5
      Herramienta_id:
        type: "integer"
        example: 2
      createdAt:
        type: "string"
        format: "date-time"
      updateAt:
         type: "string"
         format: "date-time"