swagger: "2.0"
info:
  description: "The Daily Reports Open API contract provides access to our platform's 4 main modules: Users, Classroom Reviews, Inventory, and Reports. Authorized users can use the API to create, update, and query data in each of these modules, enabling integration of Daily Reports with other applications and systems. Additionally, the use of our API ensures secure and reliable communication between Daily Reports and the external systems that integrate with our platform."
  version: "1.0.0"
  title: "Daily Reports API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3000"
basePath: "/api"


tags:
- name: "Users"
  description: "CRUD for the users and control of the login"
- name: "Computer"
  description: "CRUD for the computers table"  
- name: "Classroom"
  description: "CRUD for the Classroom table"  
- name: "Tools"
  description: "CRUD complete for tools."
- name: "Inventory"
  description: "CRUD complete for the inventory."
- name: "Reports"
  description: "CRUD complete for the reports."  



schemes:
- "http"

paths:
  /api/auth/signup:
    post:
      tags:
      - "Users"
      summary: "Path to create a new user on the application."
      operationId: "postSignUp"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Format to create a new user."
        required: true
        schema:
          $ref: "#/definitions/SignUpRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SignUpResponse"
        "400":
          description: "Content con not be empty!"
        "500":
          description: "Some error ocurred whilw creating the Tool"
  /api/auth/signin:
    post:
      tags:
      - "Users"
      summary: "Path to singin a user on the application."
      operationId: "postSignIn"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Format to singin a user on the application."
        required: true
        schema:
          $ref: "#/definitions/SignInRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SignInResponse"
        "400":
          description: "Content con not be empty!"
        "500":
          description: "Some error ocurred whilw creating the Tool"
  /api/user:
    get:
      tags:
        - "Users"
      summary: "Path to get all the users of the application."
      description: "Format to get all users of the application."
      operationId: "getAllUsers"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ArrayGetAllUsers"
        "400":
          description: "Content con not be empty!"
        "500":
          description: "Some error ocurred whilw creating the user"
          
  /api/user-roles:
    get:
      tags:
        - "Users"
      summary: "Path to get all the users with the roles of each user of the application."
      description: "Format to get all users of the application."
      operationId: "getAllUsersRoles"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ArrayGetAllUsersRoles"
        "400":
          description: "Content con not be empty!"
        "500":
          description: "Some error ocurred whilw creating the user"
  /api/user{usersId}:
    put:
      tags:
      - "Users"
      summary: "Update users with Id."
      operationId: "putUserById"
      produces:
      - "application/json"
      parameters:
      - name: "usersId"
        in: "path"
        description: "It is used to search for a specific user."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      - in: "body"
        name: "body"
        description: "Scheme to update a user."
        required: true
        schema:
          $ref: "#/definitions/UpdateUsersRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UpdateUsersResponse"
        "400":
          description: "Cannot update User with id=${id}. Maybe User was not found or req.body is empty!"
        "500":
          description: "Error updating User with id= + id"   
    get:
      tags:
      - "Users"
      summary: "Search for a user by specific ID."
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "usersId"
        in: "path"
        description: "It is used to search for a specific user"
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetAllUsersResponse"
        "404":
          description: "Cannot find User with id=${id}."
        "500":
          description: "Error retrieving User with id= + id"
    delete:
      tags:
      - "Users"
      summary: "Delete a user by specific ID."
      operationId: "deleteUserById"
      produces:
      - "application/json"
      parameters:
      - name: "usersId"
        in: "path"
        description: "It is used to delete for a specific user"
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/DeleteUsersResponse"
        "400":
          description: "Cannot delete User with id=${id}. Maybe User was not found!"
        "500":
          description: "Could not delete User with id= + id"
          
  /api/computer:
    get:
      tags:
      - "Computer"
      summary: "Returns all computers in the application"
      operationId: "getComputer"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetArrayComputer"
        "400":
          description: "Cannot delete computer with id=${id}. Maybe computer was not found!"
        "500":
           description: "Some error occurred while retrieving Computers."
    post:
      tags:
      - "Computer"
      summary: "Path to create a new computer within the application."
      operationId: "postComputer"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Create new Computer."
        required: true
        schema:
          $ref: "#/definitions/PostComputerRequest"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PostComputerResponse"
        "400":
            description: "Content can not be empty!"
        "500":
            description: "Some error occurred while creating the Computer."
  /api/computer{computerId}:
    put:
      tags:
      - "Computer"
      summary: "Update a Computer by specific ID."
      operationId: "putComputerById"
      produces:
      - "application/json"
      parameters:
      - name: "computerId"
        in: "path"
        description: "It is used to search for a specific Computer."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      - in: "body"
        name: "body"
        description: "Scheme for updating an application Computer."
        required: true
        schema:
          $ref: "#/definitions/PostComputerRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PutComputerResponse"
        "400":
          description: "Cannot update Computer with id=${id}. Maybe Computer was not found or req.body is empty!"
        "500":
          description: "Error updating Computer with id= + id"
    get:
      tags:
      - "Computer"
      summary: "Search for a computer by specific ID."
      operationId: "getComputerrById"
      produces:
      - "application/json"
      parameters:
      - name: "computerId"
        in: "path"
        description: "It is used to search for a specific Computer."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetComputerRequest"
        "404":
          description: "Cannot find Computer with id=${id}."
        "500":
          description: "Error retrieving Computer with id= + id"
    delete:
      tags:
      - "Computer"
      summary: "Remove a Computer from the app."
      operationId: "deletecomputer"
      produces:
      - "application/json"
      parameters:
      - name: "computerId"
        in: "path"
        description: "Id of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/DeleteComputerResponse"
        "400":
          description: "Cannot delete Computer with id=${id}. Maybe Computer was not found!"
        "500":
           description: "Could not delete Computer with id= + id"          
          
  /api/classroom:
    post: 
      tags:
       - "Classroom"
      summary: "Create a new classroom with in the application"
      operationId: "postClassroom"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Format to create a new Classroom"
        required: true
        schema:
          $ref: "#/definitions/PostClassroomRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PostClassroomResponse"
        "400":
          description: "Content can not be empty!"
        "500":
          description: "Some error occurred while creating the Classroom."
    get:
      tags:
       - "Classroom"
      summary: "Returns all the classrooms of the application"
      operationId: "getClassroom"
      produces:
      - "application/json"
      parameters: []
      responses:
         "200":
           description: "succesful operation"
           schema:
             $ref: "#/definitions/ArrayGetClassroomResponse"
         
  /api/classroom{roomId}:
    put:
      tags:
      - "Classroom"
      summary: "Update classroom with Id ."
      operationId: "putAulaById"
      produces:
      - "application/json"
      parameters:
      - name: "roomId"
        in: "path"
        description: "Search for a specific classroom."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated classroom scheme."
        required: true
        schema:
          $ref: "#/definitions/PostClassroomRequest"
      responses:
        "200":
           description: "succesful operation"
           schema:
             $ref: "#/definitions/PutClassroomResponse"
        "400":
          description: "Cannot update Classroom with id=${id}. Maybe Classroom was not found or req.body is empty!"
        "500":
          description: "Error updating Classroom with id= + id"
    get:
      tags:
      - "Classroom"
      summary: "Find a Classroom by ID."
      operationId: "getroomById"
      produces:
      - "application/json"
      parameters:
      - name: "roomId"
        in: "path"
        description: "Search for a specific classroom."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
           description: "succesful operation"
           schema:
             $ref: "#/definitions/GetClassroomResponse"
        "404":
          description: "Cannot find Classroom with id=${id}."
        "500":
          description: "Error retrieving Classroom with id= + id"
    delete:
      tags:
      - "Classroom"
      summary: "Delete Classroom."
      operationId: "deleteAula"
      produces:
      - "application/json"
      parameters:
      - name: "roomId"
        in: "path"
        description: "Id be doing erased"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/DeleteClassroomResponse"
        "400":
          description: "Cannot delete Classroom with id=${id}. Maybe Classroom was not found!"
        "500":
          description: "Could not delete Classroom with id= + id"          
          
  /api/tool:
    post:
      tags:
      - "Tools"
      summary: "Path to create a new tool with in the application."
      operationId: "postTools"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Format to create a new tool."
        required: true
        schema:
          $ref: "#/definitions/PostToolsRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PostToolsResponse"
        "400":
          description: "Content con not be empty!"
        "500":
          description: "Some error ocurred whilw creating the Tool"
    get:
      tags:
      - "Tools"
      summary: "Return all tools."
      operationId: "gettool"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ArrayGetToolsResponse"
        "400": 
          description: "Content can not be empty!"
        "500":
          description: "Some error occurred while retrieving Tools."
  /api/tool{toolsId}:
    put:
      tags:
      - "Tools"
      summary: "Update tools with Id."
      operationId: "putToolsById"
      produces:
      - "application/json"
      parameters:
      - name: "toolsId"
        in: "path"
        description: "It is used to search for a specific tool."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      - in: "body"
        name: "body"
        description: "Scheme to update a tool."
        required: true
        schema:
          $ref: "#/definitions/PostToolsRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PutToolsResponse"
        "400":
          description: "Cannot update Tool with id=${id}. Maybe Tool was not found or req.body is empty!"
        "500":
          description: "Error updating Tool with id= + id"  
    get:
      tags:
      - "Tools"
      summary: "Search for a tool by specific ID."
      operationId: "gettoolsById"
      produces:
      - "application/json"
      parameters:
      - name: "toolsId"
        in: "path"
        description: "It is used to search for a specific tool"
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetToolsRequest"
        "404":
          description: "Cannot find Tool with id=${id}."
        "500":
          description: "Error retrieving Tool with id= + id"  
    delete:
      tags:
      - "Tools"
      summary: "Delete tools"
      operationId: "deleteTools"
      produces:
      - "application/json"
      parameters:
      - name: "toolsId"
        in: "path"
        description: "ID of the tools that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/DeleteToolResponse"
        "400":
          description: "Cannot delete Tool with id=${id}. Maybe Tool was not found!"
        "500":
          description: "Could not delete Tool with id= + id"







  /api/inventory:
    post:
      tags:
      - "Inventory"
      summary: "Path to create a new inventory on the application."
      operationId: "postInventory"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Format to create a new relation on the inventary."
        required: true
        schema:
          $ref: "#/definitions/PostInventoryRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PostInventoryResponse"
        "400":
          description: "Content con not be empty!"
        "500":
          description: "Some error ocurred while creating the inventary"
    get:
      tags:
      - "Inventory"
      summary: "Return all tools."
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ArrayGetAllInventory"
        "400": 
          description: "Content can not be empty!"
        "500":
          description: "Some error occurred while retrieving inventary."
  /api/inventory{inventoryId}:
    put:
      tags:
      - "Inventory"
      summary: "Update tools with Id."
      operationId: "putInventoryById"
      produces:
      - "application/json"
      parameters:
      - name: "inventoryId"
        in: "path"
        description: "It is used to search for a specific inventary."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      - in: "body"
        name: "body"
        description: "Scheme to update the relation of inventary."
        required: true
        schema:
          $ref: "#/definitions/PutInventoryRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PutInventoryResponse"
        "400":
          description: "Cannot update inventary with id=${id}. Maybe inventary was not found or req.body is empty!"
        "500":
          description: "Error updating inventary with id= + id"  
    get:
      tags:
      - "Inventory"
      summary: "Search for a relation of inventary by specific ID."
      operationId: "getInventoryById"
      produces:
      - "application/json"
      parameters:
      - name: "inventoryId"
        in: "path"
        description: "It is used to search for a specific inventary"
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetInventoryById"
        "404":
          description: "Cannot find inventary with id=${id}."
        "500":
          description: "Error retrieving inventary with id= + id"  
    delete:
      tags:
      - "Inventory"
      summary: "Delete relations of the inventary"
      operationId: "deleteInventory"
      produces:
      - "application/json"
      parameters:
      - name: "inventoryId"
        in: "path"
        description: "ID of the relation of inventary that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/DeleteInventaryResponse"
        "400":
          description: "Cannot delete inventary with id=${id}. Maybe inventary was not found!"
        "500":
          description: "Could not delete inventary with id= + id"
  
  
  
       
       
          
definitions:
  
  SignUpRequest:
    type: "object"
    properties:
      username:
        type: "string"
      email:
          type: "string"
      password:
        type: "string"
      roles:
        type: "string"
        enum:
        - "user"
        - "moderator"
        - "admin"
  
  SignUpResponse:
    type: "object"
    properties:
      message:
        type: "string"
        example: User was registered successfully
        
  SignInRequest:
    type: "object"
    properties:
      username:
        type: "string"
      password:
          type: "string"
          
  SignInResponse: 
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      username:
          type: "string"
          example: esc
      email: 
        type: "string"
        example: esc@gmail.com
      roles:
        type: "array"
        items: 
          type: "string"
          example: ROLE_USER, ROLE_MODERATOR, ROLE_ADMIN
      accessToken: 
        type: "string"
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjgxMjg4NzQyLCJleHAijE2ODEzNzUxNDJ9.dQJ-aCaj7GjoUhMz5OFW3FzMcTUfkIthVDW4GFTBnyE
          
  GetAllUsersResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      username:
          type: "string"
          example: esc
      email: 
        type: "string"
        example: esc@gmail.com
      password: 
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updateAt:
         type: "string"
         format: "date-time"
         
  GetAllUsersRolesResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      username:
          type: "string"
          example: esc
      email: 
        type: "string"
        example: esc@gmail.com
      password: 
        type: "string"
        example: password
      roles:
        type: "array"
        items: 
          type: "string"
          example: ROLE_USER, ROLE_MODERATOR, ROLE_ADMIN
          
  UpdateUsersRequest:
    type: "object"
    properties:
      username:
        type: "string"
        example: esc
      email:
          type: "string"
          example: esc@gmail.com
      password:
        type: "string"
      roles:
        type: array
        items:
          type: string
          example: admin
          
  UpdateUsersResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        example: 200
      message:
          type: "string"
          example: User was updated successfully
          
  DeleteUsersResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        example: 200
      message:
          type: "string"
          example: User was deleted successfully
          
  ArrayGetAllUsers:        
    type: "array"
    items:
      $ref: "#/definitions/GetAllUsersResponse"
      
  ArrayGetAllUsersRoles:        
    type: "array"
    items:
      $ref: "#/definitions/GetAllUsersRolesResponse"
          
  DeleteComputerResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        example: 200
      message:
          type: "string"
          example: Computer was deleted successfully
          
  DeleteClassroomResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        example: 200
      message:
          type: "string"
          example: Classroom was deleted successfully
          
  DeleteToolResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        example: 200
      message:
          type: "string"
          example: Tool was deleted successfully

  GetComputerRequest:
    type: "object"
    properties:
      Computer_id:
        type: "integer"
        example: 1
      Name:
        type: "string"
        example: esc
      createdAt:
        type: "string"
        format: "date-time"
      updateAt:
         type: "string"
         format: "date-time"
         
  GetArrayComputer:
    type: "array"
    items:
      $ref: "#/definitions/GetComputerRequest"
      
  PostComputerRequest:
    type: "object"
    properties:
      Name:
        type: "string"
        example: esc
        
  PostComputerResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 201
      Name:
        type: "string"
        example: Computer was created successfully
        
  PutComputerResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 200
      Name:
        type: "string"
        example: Computer was updated successfully

  PostClassroomRequest:
    type: "object"
    properties:
      Floor:
        type: "integer"
      Number:
        type: "integer"
        
  PostClassroomResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 201
      Name:
        type: "string"
        example: Classroom was created successfully
        
  GetClassroomResponse:
    type: "object"
    properties:
      Classroom_id:
        type: "integer"
        example: 1
      Floor:
        type: "integer"
        example: -2
      Number:
        type: "integer"
        example: 2
      createdAt:
        type: "string"
        format: "date-time"
      updateAt:
         type: "string"
         format: "date-time"
         
    
  ArrayGetClassroomResponse:
    type: "array"
    items:
      $ref: "#/definitions/GetClassroomResponse"
      
  PutClassroomResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 200
      Name:
        type: "string"
        example: Classroom was updated successfully
        
  PostToolsRequest:
    type: "object"
    properties:
      Type:
        type: "string"
        example: Hardware
      Name:
        type: "string"
        example: HDMI
      
  PostToolsResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 201
      Name:
        type: "string"
        example: Tool was created successfully
        
  GetToolsRequest:
    type: "object"
    properties:
      Tool_id:
        type: "integer"
        format: "int64"
        example: 2
      tipo:
        type: "string"
        enum:
        - "Hardware"
      Name:
        type: "string"
        example: Cable ethernet
      createdAt:
        type: "string"
        format: "date-time"
      updateAt:
         type: "string"
         format: "date-time"
        
  ArrayGetToolsResponse:
    type: "array"
    items:
      $ref: "#/definitions/GetToolsRequest"
        
  PutToolsResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 200
      Name:
        type: "string"
        example: Tool was updated successfully
      
  PostInventoryRequest:
    type: "object"
    properties:
      Computer_id:
        type: "integer"
        example: 1
      Classroom_id:
        type: "integer"
        example: 1
      Tool_id:
        type: "integer"
        example: 1
        
  PostInventoryResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 201
      Name:
        type: "string"
        example: Relation was created successfully
        
  GetAllInventory:
    type: "object"
    properties:
      Inventory_id:
        type: "integer"
        example: 1
      Classroom_id:
        type: "integer"
        example: 3
      Computer_id:
        type: "integer"
        example: 5
      Tool_id:
        type: "integer"
        example: 2
      createdAt:
        type: "string"
        format: "date-time"
      updateAt:
         type: "string"
         format: "date-time"
      tb_tool: 
         items:
          $ref: "#/definitions/GetAllInventoryTool"
      computer:
        items:
          $ref: "#/definitions/GetAllInventoryComputer"
      tb_classroom:
        items:
          $ref: "#/definitions/GetAllInventoryClassroom"

  GetAllInventoryTool:
    type: "object"
    properties:
      Tool_id:
        type: "integer"
        example: 1
      Type:
        type: "string"
        example: Hardware
      Name:
        type: "string"
        example: Cable ethernet
        
  GetAllInventoryComputer:
    type: "object"
    properties:
      Computer_id:
        type: "integer"
        example: 1
      Name:
        type: "string"
        example: 78FSDHF8DS7F
         
  GetAllInventoryClassroom:
    type: "object"
    properties:
      Classroom_id:
        type: "integer"
        example: 1
      Floor:
        type: "integer"
        example: 1
      Number:
        type: "integer"
        example: 1
        
  ArrayGetAllInventory:
    type: "array"
    items:
      $ref: "#/definitions/GetAllInventory"
      
  PutInventoryResponse:
    type: "object"
    properties:
      Status:
        type: "integer"
        example: 200
      Name:
        type: "string"
        example: Relation was updated successfully
        
  GetInventoryById:
    type: "object"
    properties:
      Inventory_id:
        type: "integer"
        example: 1
      Classroom_id:
        type: "integer"
        example: 3
      Computer_id:
        type: "integer"
        example: 5
      Tool_id:
        type: "integer"
        example: 2
      createdAt:
        type: "string"
        format: "date-time"
      updateAt:
         type: "string"
         format: "date-time"
         
  DeleteInventaryResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        example: 200
      message:
          type: "string"
          example: Relation on the inventary was deleted successfully 