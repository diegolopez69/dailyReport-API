swagger: "2.0"
info:
  description: "Este ser√° un contrato del backend para la herramienta de Daily Reports"
  version: "1.0.0"
  title: "Daily Reports API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"


tags:
- name: "Tools"
  description: "CRUD complete for tools."
- name: "Computer"
  description: "CRUD for the computers table"
- name: "Classroom"
  description: "CRUD for the Classroom table"
- name: "Ordenador_Aula"
  description: "CRUD for the relationship tables computer, classrooms and tools"


schemes:
- "http"

paths:

  /api/tool:
    get:
      tags:
      - "Tools"
      summary: "Return all tools."
      operationId: "gettool"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/tool"
        "400": 
          description: "Content can not be empty!"
        "500":
          description: "Some error occurred while retrieving Tools."

    post:
      tags:
      - "Tools"
      summary: "Path to create a new tool with in the application."
      operationId: "postTools"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Format to create a new tool."
        required: true
        schema:
          $ref: "#/definitions/tool"
      responses:
        "201":
          description: "Tool was created successfully"
        "400":
          description: "Content con not be empty!"
        "500":
          description: "Some error ocurred whilw creating the Tool"
          
  /api/tool{toolsId}:
    get:
      tags:
      - "Tools"
      summary: "Search for a tool by specific ID."
      operationId: "gettoolsById"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Format to create a new tool."
        required: true
        schema:
          $ref: "#/definitions/tool"
      - name: "toolsId"
        in: "path"
        description: "It is used to search for a specific tool"
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "404":
          description: "Cannot find Tool with id=${id}."
        "500":
          description: "Error retrieving Tool with id= + id"
    
    
    put:
      tags:
      - "Tools"
      summary: "Update tools with Id."
      operationId: "putToolsById"
      produces:
      - "application/json"
      parameters:
      - name: "toolsId"
        in: "path"
        description: "It is used to search for a specific tool."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      - in: "body"
        name: "body"
        description: "Scheme to update a tool."
        required: true
        schema:
          $ref: "#/definitions/tools2"
      responses:
        "201":
          description: "Tool was created successfully!"
        "400":
          description: "Cannot update Tool with id=${id}. Maybe Tool was not found or req.body is empty!"
        "500":
          description: "Error updating Tool with id= + id"      
          
          
    delete:
      tags:
      - "Tools"
      summary: "Delete tools"
      operationId: "deleteTools"
      produces:
      - "application/json"
      parameters:
      - name: "toolsId"
        in: "path"
        description: "ID of the tools that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "201": 
          description: "Tool was deleted successfully"
        "400":
          description: "Cannot delete Tool with id=${id}. Maybe Tool was not found!"
        "500":
          description: "Could not delete Tool with id= + id"
 
  /api/computer:
    get:
      tags:
      - "Computer"
      summary: "Returns all computers in the application"
      operationId: "getComputer"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Computer"
        "500":
           description: "Some error occurred while retrieving Computers."

      
    post:
      tags:
      - "Computer"
      summary: "Path to create a new computer within the application."
      operationId: "postComputer"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Create new Computer."
        required: true
        schema:
          $ref: "#/definitions/Computer"
      responses:
        "201":
           description: "Computer was created successfully!"
        "400":
            description: "Content can not be empty!"
        "500":
            description: "Some error occurred while creating the Computer."

          
  /api/computer{ordId}:
    get:
      tags:
      - "Computer"
      summary: "Search for a computer by specific ID."
      operationId: "getComputerrById"
      produces:
      - "application/json"
      parameters:
      - name: "ordId"
        in: "path"
        description: "It is used to search for a specific Computer."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Computer"
        "404":
          description: "Cannot find Computer with id=${id}."
        "500":
          description: "Error retrieving Computer with id= + id"
    
    
    put:
      tags:
      - "Computer"
      summary: "Update a Computer by specific ID."
      operationId: "putComputerById"
      produces:
      - "application/json"
      parameters:
      - name: "ordId"
        in: "path"
        description: "It is used to search for a specific Computer."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      - in: "body"
        name: "body"
        description: "Scheme for updating an application Computer."
        required: true
        schema:
          $ref: "#/definitions/Computer2"

      responses:
        "400":
          description: "Cannot update Computer with id=${id}. Maybe Computer was not found or req.body is empty!"
        "500":
          description: "Error updating Computer with id= + id"      
          
          
    delete:
      tags:
      - "Computer"
      summary: "Remove a Computer from the app."
      operationId: "deletecomputer"
      produces:
      - "application/json"
      parameters:
      - name: "ordId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "Computer was deleted successfully!"
        "400":
          description: "Cannot delete Computer with id=${id}. Maybe Computer was not found!"
        "500":
           description: "Could not delete Computer with id= + id"
 
  /api/room:
    get:
      tags:
       - "Classroom"
      summary: "Returns all the classrooms of the application"
      operationId: "getClassroom"
      produces:
      - "application/json"
      parameters: []
      responses:
         "200":
           description: "succesful operation"
           schema:
             $ref: "#/definitions/Classroom"
              
    post: 
      tags:
       - "Classroom"
      summary: "Create a new classroom with in the application"
      operationId: "postClassroom"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Format to create a new Classroom"
        required: true
        schema:
          $ref: "#/definitions/Classroom"
      responses:
        "201":
          description: "Classroom was created successfully!"
        "400":
          description: "Content can not be empty!"
        "500":
          description: "Some error occurred while creating the Classroom."
          
         
  /api/room{roomId}:
    get:
      tags:
      - "Classroom"
      summary: "Find a Classroom by ID."
      operationId: "getroomById"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Format to get a  Classroom"
        required: true
        schema:
          $ref: "#/definitions/Classroom"
      - name: "roomId"
        in: "path"
        description: "It is used to search for a specific Classroom."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "404":
          description: "Cannot find Classroom with id=${id}."
        "500":
          description: "Error retrieving Classroom with id= + id"
    
    
    put:
      tags:
      - "Classroom"
      summary: "Update classroom with Id ."
      operationId: "putAulaById"
      produces:
      - "application/json"
      parameters:
      - name: "roomId"
        in: "path"
        description: "Search for a specific classroom."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated classroom scheme."
        required: true
        schema:
          $ref: "#/definitions/Classroom"
      responses:
        "200":
          description: "Classroom was updated successfully."
        "400":
          description: "Cannot update Classroom with id=${id}. Maybe Classroom was not found or req.body is empty!"
        "500":
          description: "Error updating Classroom with id= + id"      
          
          
    delete:
      tags:
      - "Classroom"
      summary: "Delete Classroom."
      operationId: "deleteAula"
      produces:
      - "application/json"
      parameters:
      - name: "roomId"
        in: "path"
        description: "Id be doing erased"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "Classroom was deleted successfully!"
        "400":
          description: "Cannot delete Classroom with id=${id}. Maybe Classroom was not found!"
        "500":
          description: "Could not delete Classroom with id= + id"
  
  /api/ordenadorAula:
    get:
      tags:
       - "Ordenador_Aula"
      summary: "Returns all the relationship made in the application"
      operationId: "getordenadorAula"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Scheme to get the whole relationship"
        required: true
        schema:
          $ref: "#/definitions/Ordenador_Aula"
      responses:
         "500":
           description: "Some error occurred while retrieving computer_classrooms."
                
    post: 
      tags:
       - "Ordenador_Aula"
      summary: "Create a new relation"
      operationId: "postordenadorAula"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Format for creating a new relationship"
        required: true
        schema:
          $ref: "#/definitions/Ordenador_Aula"
      responses:
        "201":
          description: "computer_classroom was created successfully!"
        "400":
          description: "Content can not be empty!"
        "500":
           description: "Some error occurred while creating the computer_classroom."
          
         
  /api/ordenadorAula{OrdenadorAulaId}:
    get:
      tags:
      - "Ordenador_Aula"
      summary: "Find a relationship by ID."
      operationId: "getordenadorAulaById"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Format to search for a new relationship"
        required: true
        schema:
          $ref: "#/definitions/Ordenador_Aula"
      - name: "OrdenadorAulaId"
        in: "path"
        description: "Used to find a relationship."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      responses:
        "404":
          description: "Cannot find computer_classroom with id=${id}."
        "500":
          description: "Error retrieving computer_classroom with id= + id"
    
    
    put:
      tags:
      - "Ordenador_Aula"
      summary: "Update a relationship by id."
      operationId: "putOrdenadorAulaById"
      produces:
      - "application/json"
      parameters:
      - name: "OrdenadorAulaId"
        in: "path"
        description: "Look for a specific relationship."
        required: true
        type: "integer"
        maximum: 100.0
        minimum: 1.0
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated schema of relations."
        required: true
        schema:
          $ref: "#/definitions/Ordenador_Aula"   
      responses:
        "200":
          description: "computer_classroom was updated successfully."
        "400":
          description: "Cannot update computer_classroom with id=${id}. Maybe computer_classroom was not found or req.body is empty!"
        "500":
          description: "Error updating computer_classroom with id= + id"      
          
          
    delete:
      tags:
      - "Ordenador_Aula"
      summary: "Delete a relationship from the application."
      operationId: "deleteOrdenadorAula"
      produces:
      - "application/json"
      parameters:
      - name: "OrdenadorAulaId"
        in: "path"
        description: "Id of the relation to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Cannot delete computer_classroom with id=${id}. Maybe computer_classroom was not found!"
        "500":
          description: "Could not delete computer_classroom with id= + id"
          
          
definitions:
  
  tool:
    type: "object"
    properties:
      Herramienta_id:
        type: "integer"
        format: "int64"
      tipo:
        type: "string"
        enum:
        - "Software"
        - "Hardware"
      Nombre:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updateAt:
         type: "string"
         format: "date-time"   

  tools2:
    type: "object"
    properties:
      message:
        type: "string" 
      
  Computer:
    type: "object"
    properties:
      Ordenador_id:
        type: "integer"
        format: "int64"
      Nombre:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updateAt:
         type: "string"
         format: "date-time"
    
  Computer2:
    type: "object"
    properties:
      message:
        type: "string"
        

  Classroom:
    type: "object"
    properties:
      Aula_id:
        type: "integer"
        format: "int64"
      Planta:
        type: "integer"
      Numero:
        type: "integer"
      createdAt:
        type: "string"
        format: "date-time"
      updateAt:
         type: "string"
         format: "date-time"
      
        
  Ordenador_Aula:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      id_ordenador:
        type: "integer"
      id_aula:
        type: "integer"
      id_herramienta:
        type: "integer"
  

  
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
        